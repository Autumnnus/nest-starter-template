openapi: 3.0.3
info:
  title: Education Platform API
  version: '1.0.0'
  description: >-
    Contract for the education platform API covering authentication, user
    management, course catalog and assignment submissions.
servers:
  - url: https://api.example.com/api/v1
security:
  - bearerAuth: []
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    IdempotencyKey:
      name: Idempotency-Key
      in: header
      required: true
      schema:
        type: string
      description: Replay protection key. Repeat calls with the same key receive the same response.
paths:
  /auth/login:
    post:
      summary: Exchange credentials for access tokens
      tags: [Auth]
      security: []
      parameters:
        - $ref: '#/components/parameters/IdempotencyKey'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 6
                deviceId:
                  type: string
                deviceName:
                  type: string
      responses:
        '200':
          description: Tokens issued
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokens'
        '401':
          description: Invalid credentials
  /auth/refresh:
    post:
      summary: Rotate access and refresh tokens
      tags: [Auth]
      security: []
      parameters:
        - $ref: '#/components/parameters/IdempotencyKey'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [refreshToken]
              properties:
                refreshToken:
                  type: string
      responses:
        '200':
          description: Tokens rotated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokens'
  /auth/sessions:
    get:
      summary: List active sessions for the current user
      tags: [Auth]
      responses:
        '200':
          description: Array of sessions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Session'
  /auth/sessions/{sessionId}:
    delete:
      summary: Revoke a session
      tags: [Auth]
      parameters:
        - $ref: '#/components/parameters/IdempotencyKey'
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Revocation acknowledged
  /users:
    get:
      summary: List users with pagination
      tags: [Users]
      parameters:
        - name: role
          in: query
          schema:
            type: string
            enum: [user, admin, moderator]
        - name: search
          in: query
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Users page
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUsers'
  /users/{userId}:
    get:
      summary: Retrieve a user profile
      tags: [Users]
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Public profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicUser'
    patch:
      summary: Update a user profile
      tags: [Users]
      parameters:
        - $ref: '#/components/parameters/IdempotencyKey'
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [profile]
              properties:
                profile:
                  $ref: '#/components/schemas/UserProfileUpdate'
      responses:
        '200':
          description: Updated profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicUser'
  /courses:
    get:
      summary: List courses
      tags: [Courses]
      parameters:
        - name: tag
          in: query
          schema:
            type: string
        - name: instructorId
          in: query
          schema:
            type: string
        - name: search
          in: query
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
        - name: limit
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: Paginated courses
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCourses'
    post:
      summary: Create a new course
      tags: [Courses]
      parameters:
        - $ref: '#/components/parameters/IdempotencyKey'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCourse'
      responses:
        '201':
          description: Course created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseDetail'
  /courses/{courseId}:
    get:
      summary: Retrieve course details
      tags: [Courses]
      parameters:
        - name: courseId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Course detail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseDetail'
  /submissions:
    post:
      summary: Submit assignment work
      tags: [Submissions]
      parameters:
        - $ref: '#/components/parameters/IdempotencyKey'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSubmission'
      responses:
        '201':
          description: Submission accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Submission'
  /submissions/outbox:
    get:
      summary: Inspect submission outbox events
      tags: [Submissions]
      responses:
        '200':
          description: Pending events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OutboxEvent'
components:
  schemas:
    AuthTokens:
      type: object
      required: [tokenType, accessToken, expiresIn, refreshToken, session]
      properties:
        tokenType:
          type: string
          example: Bearer
        accessToken:
          type: string
        expiresIn:
          type: integer
        refreshToken:
          type: string
        session:
          $ref: '#/components/schemas/Session'
    Session:
      type: object
      required: [id, createdAt, lastAccessedAt, expiresAt]
      properties:
        id:
          type: string
        createdAt:
          type: string
          format: date-time
        lastAccessedAt:
          type: string
          format: date-time
        expiresAt:
          type: string
          format: date-time
        device:
          type: object
          properties:
            deviceId:
              type: string
            deviceName:
              type: string
            ipAddress:
              type: string
            userAgent:
              type: string
    UserProfile:
      type: object
      required: [displayName, locale]
      properties:
        displayName:
          type: string
        locale:
          type: string
        bio:
          type: string
    UserProfileUpdate:
      type: object
      properties:
        displayName:
          type: string
        locale:
          type: string
        bio:
          type: string
    PublicUser:
      type: object
      required: [id, email, roles, profile]
      properties:
        id:
          type: string
        email:
          type: string
        roles:
          type: array
          items:
            type: string
        profile:
          $ref: '#/components/schemas/UserProfile'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    PaginatedUsers:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/PublicUser'
        pagination:
          $ref: '#/components/schemas/PaginationMeta'
    PaginationMeta:
      type: object
      properties:
        page:
          type: integer
        limit:
          type: integer
        total:
          type: integer
    CourseSummary:
      type: object
      required: [id, title, description, tags, startsAt, endsAt, updatedAt]
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        tags:
          type: array
          items:
            type: string
        startsAt:
          type: string
          format: date-time
        endsAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    CourseDetail:
      allOf:
        - $ref: '#/components/schemas/CourseSummary'
        - type: object
          required: [lessons, instructorId, createdAt, enrollment]
          properties:
            instructorId:
              type: string
            createdAt:
              type: string
              format: date-time
            lessons:
              type: array
              items:
                $ref: '#/components/schemas/CourseLesson'
            enrollment:
              type: object
              properties:
                capacity:
                  type: integer
                enrolled:
                  type: integer
                waitlisted:
                  type: integer
    CourseLesson:
      type: object
      required: [id, title, order, durationMinutes]
      properties:
        id:
          type: string
        title:
          type: string
        order:
          type: integer
        durationMinutes:
          type: integer
    PaginatedCourses:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/CourseSummary'
        pagination:
          $ref: '#/components/schemas/PaginationMeta'
    CreateCourse:
      type: object
      required: [title, description, startsAt, endsAt, instructorId, lessons]
      properties:
        title:
          type: string
        description:
          type: string
        tags:
          type: array
          items:
            type: string
        startsAt:
          type: string
          format: date-time
        endsAt:
          type: string
          format: date-time
        instructorId:
          type: string
        capacity:
          type: integer
        lessons:
          type: array
          items:
            type: object
            required: [title, durationMinutes]
            properties:
              title:
                type: string
              durationMinutes:
                type: integer
    CreateSubmission:
      type: object
      required: [courseId, assignmentId, content]
      properties:
        courseId:
          type: string
        assignmentId:
          type: string
        content:
          type: string
        submittedAt:
          type: string
          format: date-time
    Submission:
      type: object
      required: [id, userId, courseId, assignmentId, content, submittedAt]
      properties:
        id:
          type: string
        userId:
          type: string
        courseId:
          type: string
        assignmentId:
          type: string
        content:
          type: string
        submittedAt:
          type: string
          format: date-time
    OutboxEvent:
      type: object
      required: [id, event, payload, createdAt]
      properties:
        id:
          type: string
        event:
          type: string
        createdAt:
          type: string
          format: date-time
        traceId:
          type: string
        payload:
          type: object
          additionalProperties: true
