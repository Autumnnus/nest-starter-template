export interface ValidationOptions {
  message?: string;
}

export class ValidationError {
  constructor(init?: Partial<ValidationError>);
  property: string;
  constraints?: Record<string, string>;
  children?: ValidationError[];
}

export type Validator = (object: object) => ValidationError[];

export function validateSync(object: object): ValidationError[];
export function validate(object: object): Promise<ValidationError[]>;

export function IsOptional(): PropertyDecorator;
export function IsString(options?: ValidationOptions): PropertyDecorator;
export function IsNotEmpty(options?: ValidationOptions): PropertyDecorator;
export function MinLength(length: number, options?: ValidationOptions): PropertyDecorator;
export function MaxLength(length: number, options?: ValidationOptions): PropertyDecorator;
export function Matches(pattern: RegExp, options?: ValidationOptions): PropertyDecorator;
export function IsEmail(options?: ValidationOptions): PropertyDecorator;
export function IsEnum(enumObj: Record<string, unknown>, options?: ValidationOptions): PropertyDecorator;
export function IsIn(values: unknown[], options?: ValidationOptions): PropertyDecorator;
export function IsInt(options?: ValidationOptions): PropertyDecorator;
export function Min(min: number, options?: ValidationOptions): PropertyDecorator;
export function Max(max: number, options?: ValidationOptions): PropertyDecorator;
export function IsArray(options?: ValidationOptions): PropertyDecorator;
export function ArrayMinSize(size: number, options?: ValidationOptions): PropertyDecorator;
export function IsDefined(options?: ValidationOptions): PropertyDecorator;
export function IsObject(options?: ValidationOptions): PropertyDecorator;
